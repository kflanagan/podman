#!/bin/bash

# Full podman container setup, change the two variables here at the top for your basedir
## - Create a user for the container
## - Create that users homedir
## - Create a directory for your volumes
## - Check to see if the container is running
### -- If the container isn't running, remove it
## - Start the container - volume info is specific to each container, so that will need to be edited 

###################################### 
##The variables here will need to be adjusted for your installation
#container_name="plex"

container_user="plex"
container_name="plex"
container_longname="plex"
container_path="lscr.io/linuxserver/plex:latest"

#Basedir is for all of the volumes
BaseDir=/plex
#####################################


# Add the user if it doesn't exist 
useradd $container_user || echo "User already exists."


# Get the user and group ID for below
container_uid=`id -u $container_user`
container_gid=`id -g $container_user`

# create the directory for the podman volumes if it doesn't exist

if [ ! -d /home/$container_user ];then
     if ! mkdir /home/$container_user; then  # Shorter version. Shell will complain if you p>
     echo "Can't make dir: $container_user"
     fi
fi

# make the container user be the owner of it's own homedir
if [ ! -d /home/$container_user ];then
     if ! mkdir /home/$container_user ; then
     echo "Can't make dir: /home/$container_user"
     ## Set the owner and group to be the new ID for that directory you just made
     chown -R $container_uid:$container_gid /home/$container_user
     fi
fi



# Create the media directory if it doesn't exist

if [ ! -d $BaseDir ];then
     if ! mkdir $BaseDir; then
     echo "Can't make dir: $BaseDir"
     ## Set the owner and group to be the new ID for that directory you just made
     chown -R $container_uid:$container_gid $basedir
     fi
fi


# Now see if the container is running already

if [ "$(podman ps -q -f name=$container_name)" ]; then
    echo "Container $container_name is running, nothing to do"

else
# if the container isn't running, remove it
    echo "Container $container_name is not running."
    if [ "!$(podman container inspect $container_name > /dev/null 2>&1)" ]; then
    echo "$container_name is not running $(podman rm $container_name)"

#############################
# it seems that podman run command doesn't like variables for PUID and PGID,
# make them the same as the user you created above
#
# volume info is specific to each container, so that will need to be edited
#############################
# start the container
podman run -d   --name=$container_name  --net=host   \
-e PUID=1003   -e PGID=1003   -e TZ=Etc/UTC   -e VERSION=podman   \
-e PLEX_CLAIM= `#optional`   \
--replace \
-v $BaseDir/config:/config:Z   \
-v $BaseDir/music:/music:Z   \
-v $BaseDir/MusicVideos:/MusicVideos:Z  \
-v $BaseDir/Movies:/Movies:Z \
-v $BaseDir/TV:/TV:Z \
-v $BaseDir/Audiobooks:/Audiobooks:Z \
-v $BaseDir/stuff:/stuff:Z \
-v $BaseDir/transcode/temp:/transcode:Z \
-v /run/podman/podman.sock:/var/run/podman.sock:Z \
--restart unless-stopped  \
lscr.io/linuxserver/plex:latest


    fi
fi


echo "create systemd service for $container_name and cp it to /etc/systemd/system/container-$container_name.service"
# Now that we have the container running, let's make a systemd service for it
podman generate systemd --new --files --name plex

# copy that service file to the systemd directory
cp container-$container_name.service /etc/systemd/system/container-$container_name.service

